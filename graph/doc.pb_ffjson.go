// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: doc.pb.go
// DO NOT EDIT!

package graph

import (
	"bytes"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *Doc) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Doc) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"Format":`)
	fflib.WriteJsonString(buf, string(mj.Format))
	buf.WriteString(`,"Data":`)
	fflib.WriteJsonString(buf, string(mj.Data))
	buf.WriteByte(',')
	if len(mj.File) != 0 {
		buf.WriteString(`"File":`)
		fflib.WriteJsonString(buf, string(mj.File))
		buf.WriteByte(',')
	}
	if mj.Start != 0 {
		buf.WriteString(`"Start":`)
		fflib.FormatBits2(buf, uint64(mj.Start), 10, false)
		buf.WriteByte(',')
	}
	if mj.End != 0 {
		buf.WriteString(`"End":`)
		fflib.FormatBits2(buf, uint64(mj.End), 10, false)
		buf.WriteByte(',')
	}
	if len(mj.Repo) != 0 {
		buf.WriteString(`"Repo":`)
		fflib.WriteJsonString(buf, string(mj.Repo))
		buf.WriteByte(',')
	}
	if len(mj.CommitID) != 0 {
		buf.WriteString(`"CommitID":`)
		fflib.WriteJsonString(buf, string(mj.CommitID))
		buf.WriteByte(',')
	}
	if len(mj.UnitType) != 0 {
		buf.WriteString(`"UnitType":`)
		fflib.WriteJsonString(buf, string(mj.UnitType))
		buf.WriteByte(',')
	}
	if len(mj.Unit) != 0 {
		buf.WriteString(`"Unit":`)
		fflib.WriteJsonString(buf, string(mj.Unit))
		buf.WriteByte(',')
	}
	buf.WriteString(`"Path":`)
	fflib.WriteJsonString(buf, string(mj.Path))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Docbase = iota
	ffj_t_Docno_such_key

	ffj_t_Doc_Format

	ffj_t_Doc_Data

	ffj_t_Doc_File

	ffj_t_Doc_Start

	ffj_t_Doc_End

	ffj_t_Doc_Repo

	ffj_t_Doc_CommitID

	ffj_t_Doc_UnitType

	ffj_t_Doc_Unit

	ffj_t_Doc_Path
)

var ffj_key_Doc_Format = []byte("Format")

var ffj_key_Doc_Data = []byte("Data")

var ffj_key_Doc_File = []byte("File")

var ffj_key_Doc_Start = []byte("Start")

var ffj_key_Doc_End = []byte("End")

var ffj_key_Doc_Repo = []byte("Repo")

var ffj_key_Doc_CommitID = []byte("CommitID")

var ffj_key_Doc_UnitType = []byte("UnitType")

var ffj_key_Doc_Unit = []byte("Unit")

var ffj_key_Doc_Path = []byte("Path")

func (uj *Doc) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Doc) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Docbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Docno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'C':

					if bytes.Equal(ffj_key_Doc_CommitID, kn) {
						currentKey = ffj_t_Doc_CommitID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'D':

					if bytes.Equal(ffj_key_Doc_Data, kn) {
						currentKey = ffj_t_Doc_Data
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'E':

					if bytes.Equal(ffj_key_Doc_End, kn) {
						currentKey = ffj_t_Doc_End
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'F':

					if bytes.Equal(ffj_key_Doc_Format, kn) {
						currentKey = ffj_t_Doc_Format
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Doc_File, kn) {
						currentKey = ffj_t_Doc_File
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'P':

					if bytes.Equal(ffj_key_Doc_Path, kn) {
						currentKey = ffj_t_Doc_Path
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'R':

					if bytes.Equal(ffj_key_Doc_Repo, kn) {
						currentKey = ffj_t_Doc_Repo
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'S':

					if bytes.Equal(ffj_key_Doc_Start, kn) {
						currentKey = ffj_t_Doc_Start
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'U':

					if bytes.Equal(ffj_key_Doc_UnitType, kn) {
						currentKey = ffj_t_Doc_UnitType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Doc_Unit, kn) {
						currentKey = ffj_t_Doc_Unit
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_Doc_Path, kn) {
					currentKey = ffj_t_Doc_Path
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Doc_Unit, kn) {
					currentKey = ffj_t_Doc_Unit
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Doc_UnitType, kn) {
					currentKey = ffj_t_Doc_UnitType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Doc_CommitID, kn) {
					currentKey = ffj_t_Doc_CommitID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Doc_Repo, kn) {
					currentKey = ffj_t_Doc_Repo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Doc_End, kn) {
					currentKey = ffj_t_Doc_End
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Doc_Start, kn) {
					currentKey = ffj_t_Doc_Start
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Doc_File, kn) {
					currentKey = ffj_t_Doc_File
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Doc_Data, kn) {
					currentKey = ffj_t_Doc_Data
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Doc_Format, kn) {
					currentKey = ffj_t_Doc_Format
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Docno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Doc_Format:
					goto handle_Format

				case ffj_t_Doc_Data:
					goto handle_Data

				case ffj_t_Doc_File:
					goto handle_File

				case ffj_t_Doc_Start:
					goto handle_Start

				case ffj_t_Doc_End:
					goto handle_End

				case ffj_t_Doc_Repo:
					goto handle_Repo

				case ffj_t_Doc_CommitID:
					goto handle_CommitID

				case ffj_t_Doc_UnitType:
					goto handle_UnitType

				case ffj_t_Doc_Unit:
					goto handle_Unit

				case ffj_t_Doc_Path:
					goto handle_Path

				case ffj_t_Docno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Format:

	/* handler: uj.Format type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.Format = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Data:

	/* handler: uj.Data type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.Data = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_File:

	/* handler: uj.File type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.File = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Start:

	/* handler: uj.Start type=uint32 kind=uint32 */

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Start = uint32(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_End:

	/* handler: uj.End type=uint32 kind=uint32 */

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.End = uint32(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Repo:

	/* handler: uj.Repo type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.Repo = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CommitID:

	/* handler: uj.CommitID type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.CommitID = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_UnitType:

	/* handler: uj.UnitType type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.UnitType = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Unit:

	/* handler: uj.Unit type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.Unit = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Path:

	/* handler: uj.Path type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.Path = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
