// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: ref.pb.go
// DO NOT EDIT!

package graph

import (
	"bytes"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *Ref) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Ref) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteByte('{')
	if len(mj.DefRepo) != 0 {
		buf.WriteString(`"DefRepo":`)
		fflib.WriteJsonString(buf, string(mj.DefRepo))
		buf.WriteByte(',')
	}
	if len(mj.DefUnitType) != 0 {
		buf.WriteString(`"DefUnitType":`)
		fflib.WriteJsonString(buf, string(mj.DefUnitType))
		buf.WriteByte(',')
	}
	if len(mj.DefUnit) != 0 {
		buf.WriteString(`"DefUnit":`)
		fflib.WriteJsonString(buf, string(mj.DefUnit))
		buf.WriteByte(',')
	}
	buf.WriteString(`"DefPath":`)
	fflib.WriteJsonString(buf, string(mj.DefPath))
	buf.WriteByte(',')
	if len(mj.Repo) != 0 {
		buf.WriteString(`"Repo":`)
		fflib.WriteJsonString(buf, string(mj.Repo))
		buf.WriteByte(',')
	}
	if len(mj.CommitID) != 0 {
		buf.WriteString(`"CommitID":`)
		fflib.WriteJsonString(buf, string(mj.CommitID))
		buf.WriteByte(',')
	}
	if len(mj.UnitType) != 0 {
		buf.WriteString(`"UnitType":`)
		fflib.WriteJsonString(buf, string(mj.UnitType))
		buf.WriteByte(',')
	}
	if len(mj.Unit) != 0 {
		buf.WriteString(`"Unit":`)
		fflib.WriteJsonString(buf, string(mj.Unit))
		buf.WriteByte(',')
	}
	if mj.Def != false {
		if mj.Def {
			buf.WriteString(`"Def":true`)
		} else {
			buf.WriteString(`"Def":false`)
		}
		buf.WriteByte(',')
	}
	if len(mj.File) != 0 {
		buf.WriteString(`"File":`)
		fflib.WriteJsonString(buf, string(mj.File))
		buf.WriteByte(',')
	}
	buf.WriteString(`"Start":`)
	fflib.FormatBits2(buf, uint64(mj.Start), 10, false)
	buf.WriteString(`,"End":`)
	fflib.FormatBits2(buf, uint64(mj.End), 10, false)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_Refbase = iota
	ffj_t_Refno_such_key

	ffj_t_Ref_DefRepo

	ffj_t_Ref_DefUnitType

	ffj_t_Ref_DefUnit

	ffj_t_Ref_DefPath

	ffj_t_Ref_Repo

	ffj_t_Ref_CommitID

	ffj_t_Ref_UnitType

	ffj_t_Ref_Unit

	ffj_t_Ref_Def

	ffj_t_Ref_File

	ffj_t_Ref_Start

	ffj_t_Ref_End
)

var ffj_key_Ref_DefRepo = []byte("DefRepo")

var ffj_key_Ref_DefUnitType = []byte("DefUnitType")

var ffj_key_Ref_DefUnit = []byte("DefUnit")

var ffj_key_Ref_DefPath = []byte("DefPath")

var ffj_key_Ref_Repo = []byte("Repo")

var ffj_key_Ref_CommitID = []byte("CommitID")

var ffj_key_Ref_UnitType = []byte("UnitType")

var ffj_key_Ref_Unit = []byte("Unit")

var ffj_key_Ref_Def = []byte("Def")

var ffj_key_Ref_File = []byte("File")

var ffj_key_Ref_Start = []byte("Start")

var ffj_key_Ref_End = []byte("End")

func (uj *Ref) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *Ref) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_Refbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_Refno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'C':

					if bytes.Equal(ffj_key_Ref_CommitID, kn) {
						currentKey = ffj_t_Ref_CommitID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'D':

					if bytes.Equal(ffj_key_Ref_DefRepo, kn) {
						currentKey = ffj_t_Ref_DefRepo
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Ref_DefUnitType, kn) {
						currentKey = ffj_t_Ref_DefUnitType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Ref_DefUnit, kn) {
						currentKey = ffj_t_Ref_DefUnit
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Ref_DefPath, kn) {
						currentKey = ffj_t_Ref_DefPath
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Ref_Def, kn) {
						currentKey = ffj_t_Ref_Def
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'E':

					if bytes.Equal(ffj_key_Ref_End, kn) {
						currentKey = ffj_t_Ref_End
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'F':

					if bytes.Equal(ffj_key_Ref_File, kn) {
						currentKey = ffj_t_Ref_File
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'R':

					if bytes.Equal(ffj_key_Ref_Repo, kn) {
						currentKey = ffj_t_Ref_Repo
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'S':

					if bytes.Equal(ffj_key_Ref_Start, kn) {
						currentKey = ffj_t_Ref_Start
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'U':

					if bytes.Equal(ffj_key_Ref_UnitType, kn) {
						currentKey = ffj_t_Ref_UnitType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_Ref_Unit, kn) {
						currentKey = ffj_t_Ref_Unit
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_Ref_End, kn) {
					currentKey = ffj_t_Ref_End
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_Ref_Start, kn) {
					currentKey = ffj_t_Ref_Start
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Ref_File, kn) {
					currentKey = ffj_t_Ref_File
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Ref_Def, kn) {
					currentKey = ffj_t_Ref_Def
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Ref_Unit, kn) {
					currentKey = ffj_t_Ref_Unit
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Ref_UnitType, kn) {
					currentKey = ffj_t_Ref_UnitType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Ref_CommitID, kn) {
					currentKey = ffj_t_Ref_CommitID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Ref_Repo, kn) {
					currentKey = ffj_t_Ref_Repo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Ref_DefPath, kn) {
					currentKey = ffj_t_Ref_DefPath
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Ref_DefUnit, kn) {
					currentKey = ffj_t_Ref_DefUnit
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Ref_DefUnitType, kn) {
					currentKey = ffj_t_Ref_DefUnitType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_Ref_DefRepo, kn) {
					currentKey = ffj_t_Ref_DefRepo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_Refno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_Ref_DefRepo:
					goto handle_DefRepo

				case ffj_t_Ref_DefUnitType:
					goto handle_DefUnitType

				case ffj_t_Ref_DefUnit:
					goto handle_DefUnit

				case ffj_t_Ref_DefPath:
					goto handle_DefPath

				case ffj_t_Ref_Repo:
					goto handle_Repo

				case ffj_t_Ref_CommitID:
					goto handle_CommitID

				case ffj_t_Ref_UnitType:
					goto handle_UnitType

				case ffj_t_Ref_Unit:
					goto handle_Unit

				case ffj_t_Ref_Def:
					goto handle_Def

				case ffj_t_Ref_File:
					goto handle_File

				case ffj_t_Ref_Start:
					goto handle_Start

				case ffj_t_Ref_End:
					goto handle_End

				case ffj_t_Refno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_DefRepo:

	/* handler: uj.DefRepo type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.DefRepo = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DefUnitType:

	/* handler: uj.DefUnitType type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.DefUnitType = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DefUnit:

	/* handler: uj.DefUnit type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.DefUnit = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DefPath:

	/* handler: uj.DefPath type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.DefPath = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Repo:

	/* handler: uj.Repo type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.Repo = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CommitID:

	/* handler: uj.CommitID type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.CommitID = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_UnitType:

	/* handler: uj.UnitType type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.UnitType = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Unit:

	/* handler: uj.Unit type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.Unit = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Def:

	/* handler: uj.Def type=bool kind=bool */

	{

		{
			if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.Def = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.Def = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_File:

	/* handler: uj.File type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.File = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Start:

	/* handler: uj.Start type=uint32 kind=uint32 */

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Start = uint32(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_End:

	/* handler: uj.End type=uint32 kind=uint32 */

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for uint32", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseUint(fs.Output.Bytes(), 10, 32)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.End = uint32(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *RefDefKey) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *RefDefKey) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteByte('{')
	if len(mj.DefRepo) != 0 {
		buf.WriteString(`"DefRepo":`)
		fflib.WriteJsonString(buf, string(mj.DefRepo))
		buf.WriteByte(',')
	}
	if len(mj.DefUnitType) != 0 {
		buf.WriteString(`"DefUnitType":`)
		fflib.WriteJsonString(buf, string(mj.DefUnitType))
		buf.WriteByte(',')
	}
	if len(mj.DefUnit) != 0 {
		buf.WriteString(`"DefUnit":`)
		fflib.WriteJsonString(buf, string(mj.DefUnit))
		buf.WriteByte(',')
	}
	buf.WriteString(`"DefPath":`)
	fflib.WriteJsonString(buf, string(mj.DefPath))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_RefDefKeybase = iota
	ffj_t_RefDefKeyno_such_key

	ffj_t_RefDefKey_DefRepo

	ffj_t_RefDefKey_DefUnitType

	ffj_t_RefDefKey_DefUnit

	ffj_t_RefDefKey_DefPath
)

var ffj_key_RefDefKey_DefRepo = []byte("DefRepo")

var ffj_key_RefDefKey_DefUnitType = []byte("DefUnitType")

var ffj_key_RefDefKey_DefUnit = []byte("DefUnit")

var ffj_key_RefDefKey_DefPath = []byte("DefPath")

func (uj *RefDefKey) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *RefDefKey) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_RefDefKeybase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_RefDefKeyno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'D':

					if bytes.Equal(ffj_key_RefDefKey_DefRepo, kn) {
						currentKey = ffj_t_RefDefKey_DefRepo
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_RefDefKey_DefUnitType, kn) {
						currentKey = ffj_t_RefDefKey_DefUnitType
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_RefDefKey_DefUnit, kn) {
						currentKey = ffj_t_RefDefKey_DefUnit
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_RefDefKey_DefPath, kn) {
						currentKey = ffj_t_RefDefKey_DefPath
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_RefDefKey_DefPath, kn) {
					currentKey = ffj_t_RefDefKey_DefPath
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_RefDefKey_DefUnit, kn) {
					currentKey = ffj_t_RefDefKey_DefUnit
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_RefDefKey_DefUnitType, kn) {
					currentKey = ffj_t_RefDefKey_DefUnitType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_RefDefKey_DefRepo, kn) {
					currentKey = ffj_t_RefDefKey_DefRepo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_RefDefKeyno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_RefDefKey_DefRepo:
					goto handle_DefRepo

				case ffj_t_RefDefKey_DefUnitType:
					goto handle_DefUnitType

				case ffj_t_RefDefKey_DefUnit:
					goto handle_DefUnit

				case ffj_t_RefDefKey_DefPath:
					goto handle_DefPath

				case ffj_t_RefDefKeyno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_DefRepo:

	/* handler: uj.DefRepo type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.DefRepo = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DefUnitType:

	/* handler: uj.DefUnitType type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.DefUnitType = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DefUnit:

	/* handler: uj.DefUnit type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.DefUnit = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DefPath:

	/* handler: uj.DefPath type=string kind=string */

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			uj.DefPath = string(fs.Output.String())

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
